#!/bin/sh

# The number of most recent commits to preserve
N=$1

head=$(git rev-parse HEAD)
total_count=$(git rev-list --count $head)
if test $N -ge $total_count; then
    echo "Preserving all commits since preserve count ($N) >= total count ($total_count)"
else
    # NOTE: This could return more than one commit (e.g. if there is an octopus
    # merge).  Would be good to assert that this returns one commit.
    root=$(git rev-list --max-parents=0 HEAD)
    mid=$(git rev-parse HEAD~$N)
    branch=$(git branch --show-current)

    short_root=$(git rev-parse --short $root)
    short_mid=$(git rev-parse --short $mid)
    short_head=$(git rev-parse --short $head)
    left_count=$(git rev-list --count $mid)
    right_count=$(git rev-list --count $mid..$head)
    echo "Squashing the $left_count oldest commits [$short_root,$short_mid] into a single commit"
    echo "Preserving the $right_count newest commits commits ($short_mid,$short_head]"

    # Squash oldest commits
    git checkout --quiet $root
    git merge --quiet --squash $mid >/dev/null
    git commit --quiet --amend -m squashed >/dev/null

    # Preserve newest commits
    git cherry-pick --quiet $mid..$head >/dev/null

    # Move branch to new head
    git branch --force $branch HEAD
    git checkout --quiet $branch
fi
